<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数 -->
<configuration status="WARN" monitorInterval="1800">
	<Properties>
		<!-- 日志默认存放的位置,这里设置为项目根路径下,也可指定绝对路径 -->
		<property name="LOG_HOME">log4j2Logs</property>
		<!-- 控制台默认输出格式,"%-5level":日志级别,"%l":输出完整的错误位置,是小写的L,因为有行号显示,所以影响日志输出的性能 -->
		<property name="console_log_pattern">%d{yyyy-MM-dd HH:mm:ss} [%-5level] %l -%m%n</property>
		<!-- 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 -->
		<property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss} [%-5level] %C.%M -%m%n</property>
		<!-- 日志默认切割的最小单位 -->
		<property name="every_file_size">50MB</property>
		<!-- 日志默认输出级别 -->
		<property name="output_log_level">DEBUG</property>
		<!-- 控制台显示的日志最低级别 -->
		<property name="console_print_level">INFO</property>
		<!-- 日志文件的编码 -->
        <property name="log_charset">UTF-8</property>
        <!-- 每隔多长时间生成一个文件，规则是根据filePattern属性中结尾的时间格式所定%d{yyyy-MM-dd} -dd表示每天，以此类推 -->
        <property name="interval">1</property>
        <!-- 保留多长时间的旧日志，超出时间的则删除，规则与 interval 相同-->
        <property name="del_time">60d</property>
        
		<!-- all日志默认存放路径(所有级别日志) -->
		<property name="rolling_fileName">${LOG_HOME}/all/all.log</property>
		<!-- all日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="rolling_filePattern">${LOG_HOME}/all/%d{yyyy-MM}/all-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- all日志默认删除旧日志路径-->
		<property name="del_rolling_filePattern">${LOG_HOME}/all/</property>
		<!-- all日志默认同类型日志,同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
		<property name="rolling_max">30</property>
		
		<!-- Info日志默认存放路径(Info级别日志) -->
		<property name="info_fileName">${LOG_HOME}/info/info.log</property>
		<!-- Info日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="info_filePattern">${LOG_HOME}/info/%d{yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- Info日志默认删除旧日志路径-->
		<property name="del_info_filePattern">${LOG_HOME}/info/</property>
		<!-- Info日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
		<property name="info_max">10</property>
		
		
		<!-- Warn日志默认存放路径(Warn级别日志) -->
		<property name="warn_fileName">${LOG_HOME}/warn/warn.log</property>
		<!-- Warn日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="warn_filePattern">${LOG_HOME}/warn/%d{yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- Warn日志默认删除旧日志路径-->
		<property name="del_warn_filePattern">${LOG_HOME}/warn/</property>
		<!-- Warn日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
		<property name="warn_max">10</property>
		
		<!-- Error日志默认存放路径(Error级别日志) -->
		<property name="error_fileName">${LOG_HOME}/error/error.log</property>
		<!-- Error日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="error_filePattern">${LOG_HOME}/error/%d{yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- Error日志默认删除旧日志路径-->
		<property name="del_error_filePattern">${LOG_HOME}/error/</property>
		<!-- Error日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
		<property name="error_max">10</property>
		
		<!-- 自定义(OPERATING)日志默认存放路径 -->
		<property name="operating_fileName">${LOG_HOME}/customLog/operating/operating.log</property>
		<!-- 自定义(OPERATING)日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="operating_filePattern">${LOG_HOME}/customLog/operating/%d{yyyy-MM}/operating-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- 自定义(OPERATING)日志默认删除旧日志路径-->
		<property name="del_operating_filePattern">${LOG_HOME}/customLog/operating/</property>
		<!-- 自定义(OPERATING)日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
		<property name="operating_max">10</property>
	</Properties>
	
	<!-- 自定义log等级 -->
	<CustomLevels>
		<!-- 定义自定义日志级别时，intLevel参数确定自定义级别相对于Log4j2内置的标准级别的位置。 -->
	    <CustomLevel name="OPERATING" intLevel="0" />
	 </CustomLevels>

	<!--定义Appender -->
	<Appenders>
		<!-- 用来定义输出到控制台的配置 -->
		<Console name="Console" target="SYSTEM_OUT">
			<!-- 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
			<ThresholdFilter level="${console_print_level}" onMatch="ACCEPT" onMismatch="DENY" />
			<!-- 设置输出格式,不设置默认为:%m%n -->
			<PatternLayout charset="${log_charset}" pattern="${console_log_pattern}" />
		</Console>

		<!-- 打印root中指定的level级别以上的日志到all文件 -->
		<RollingFile name="RollingFile" fileName="${rolling_fileName}" filePattern="${rolling_filePattern}">
			<!-- 设置输出日志的编码和格式 -->
			<PatternLayout charset="${log_charset}" pattern="${log_pattern}" />
			<!-- 匹配INFO以及以上级别 -->
			<Filters>
				<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
			<!-- 设置同类型日志,同一文件夹下可以存放的数量,如果不设置此属性则默认存放7个文件 -->
			<DefaultRolloverStrategy max="${rolling_max}">
				<!-- 定期删除日志 -->
                <Delete basePath="${del_rolling_filePattern}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz" />
                    <IfLastModified age="${del_time}" />
                </Delete>
            </DefaultRolloverStrategy>
			<!-- 生成多个日志的规则，旧日志按照filePattern给定的格式生成 -->
			<Policies>
                <!-- 每interval生成一个新的日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="${interval}"/>
                <!-- 日志文件大于every_file_size时生成一个新的日志  -->
                <SizeBasedTriggeringPolicy size="${every_file_size}" />
            </Policies>
		</RollingFile>
		
		<!-- 打印INFO级别的日志到文件 -->
		<RollingFile name="InfoFile" fileName="${info_fileName}" filePattern="${info_filePattern}">
			<!-- 设置输出日志的编码和格式 -->
			<PatternLayout charset="${log_charset}" pattern="${log_pattern}" />
			<!-- 匹配INFO级别 -->
			<Filters>
				<ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL" />
				<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
			<!-- 设置同类型日志,同一文件夹下可以存放的数量,如果不设置此属性则默认存放7个文件 -->
			<DefaultRolloverStrategy max="${info_max}">
				<!-- 定期删除日志 -->
                <Delete basePath="${del_info_filePattern}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz" />
                    <IfLastModified age="${del_time}" />
                </Delete>
            </DefaultRolloverStrategy>
			<!-- 生成多个日志的规则，旧日志按照filePattern给定的格式生成 -->
			<Policies>
                <!-- 每interval生成一个新的日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="${interval}"/>
                <!-- 日志文件大于every_file_size时生成一个新的日志  -->
                <SizeBasedTriggeringPolicy size="${every_file_size}" />
            </Policies>
		</RollingFile>

		<!-- 打印WARN级别的日志到文件 -->
		<RollingFile name="WarnFile" fileName="${warn_fileName}" filePattern="${warn_filePattern}">
			<!-- 设置输出日志的编码和格式 -->
			<PatternLayout charset="${log_charset}" pattern="${log_pattern}" />
			<!-- 匹配WARN级别 -->
			<Filters>
				<ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL" />
				<ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
			<!-- 设置同类型日志,同一文件夹下可以存放的数量,如果不设置此属性则默认存放7个文件 -->
			<DefaultRolloverStrategy max="${warn_max}">
				<!-- 定期删除日志 -->
                <Delete basePath="${del_warn_filePattern}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz" />
                    <IfLastModified age="${del_time}" />
                </Delete>
            </DefaultRolloverStrategy>
			<!-- 生成多个日志的规则，旧日志按照filePattern给定的格式生成 -->
			<Policies>
                <!-- 每interval生成一个新的日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="${interval}"/>
                <!-- 日志文件大于every_file_size时生成一个新的日志  -->
                <SizeBasedTriggeringPolicy size="${every_file_size}" />
            </Policies>
		</RollingFile>

		<!-- 打印ERROR级别的日志到文件 -->
		<RollingFile name="ErrorFile" fileName="${error_fileName}" filePattern="${error_filePattern}">
			<!-- 设置输出日志的编码和格式 -->
			<PatternLayout charset="${log_charset}" pattern="${log_pattern}" />
			<!-- 匹配ERROR级别 -->
			<Filters>
				<ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL" />
				<ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
			<!-- 设置同类型日志,同一文件夹下可以存放的数量,如果不设置此属性则默认存放7个文件 -->
			<DefaultRolloverStrategy max="${error_max}">
				<!-- 定期删除日志 -->
                <Delete basePath="${del_error_filePattern}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz" />
                    <IfLastModified age="${del_time}" />
                </Delete>
            </DefaultRolloverStrategy>
			<!-- 生成多个日志的规则，旧日志按照filePattern给定的格式生成 -->
			<Policies>
                <!-- 每interval生成一个新的日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="${interval}"/>
                <!-- 日志文件大于every_file_size时生成一个新的日志  -->
                <SizeBasedTriggeringPolicy size="${every_file_size}" />
            </Policies>
		</RollingFile>
		
		<!-- 打印OPERATING级别的日志到文件 -->
		<RollingFile name="OperatingFile" fileName="${operating_fileName}" filePattern="${operating_filePattern}">
			<!-- 设置输出日志的编码和格式 -->
			<PatternLayout charset="${log_charset}" pattern="${log_pattern}" />
			<!-- 匹配OPERATING以及以上级别 -->
			<Filters>
				<ThresholdFilter level="OPERATING" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
			<!-- 设置同类型日志,同一文件夹下可以存放的数量,如果不设置此属性则默认存放7个文件 -->
			<DefaultRolloverStrategy max="${operating_max}">
				<!-- 定期删除日志 -->
                <Delete basePath="${del_operating_filePattern}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz" />
                    <IfLastModified age="${del_time}" />
                </Delete>
            </DefaultRolloverStrategy>
			<!-- 生成多个日志的规则，旧日志按照filePattern给定的格式生成 -->
			<Policies>
              	<!-- 每interval生成一个新的日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="${interval}"/>
                <!-- 日志文件大于every_file_size时生成一个新的日志  -->
                <SizeBasedTriggeringPolicy size="${every_file_size}" />
            </Policies>
		</RollingFile>
	</Appenders>

	<!--然后定义logger,只有定义了logger并引入的appender,appender才会生效 -->
	<loggers>
		<!-- 设置对打印sql语句的支持 -->
		<logger name="java.sql" level="debug" additivity="false">
			<appender-ref ref="Console" />
		</logger>
		<!--建立一个默认的root的logger -->
		<root level="${output_log_level}">
			<appender-ref ref="Console" />
			<!--<appender-ref ref="RollingFile" />
			<appender-ref ref="InfoFile" />
			<appender-ref ref="WarnFile" />
			<appender-ref ref="ErrorFile" />
			<appender-ref ref="OperatingFile" />-->
		</root>
	</loggers>
</configuration>